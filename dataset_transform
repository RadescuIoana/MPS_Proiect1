# This Python file uses the following encoding: utf-8
# importing the module
import csv
import re
import pandas as pd
#functia de parsare si codificarea a datei
def parse_date(date):
    #citesc pana la delimitator [" ,-./"]
    #verific fiecare token. Pentru primul token de dim 2:
    #                                       sau de dim 4:
    tokens = re.split('[ ,-./a-zA-Z]', date)
    tokens = list(filter(None, tokens))
    if len(tokens) < 3:
        return 0

    for i in range(len(tokens)):
        #check day
        if len(tokens[i]) == 2:
            #check_year
            if (int(tokens[i+2]) == 20 or (int(tokens[i+2]) == 2020) or (int(tokens[i+2]) == 202) or (int(tokens[i+2]) > 2020)):
                #check month
                if int(tokens[i+1]) >= 3:
                    return 1
                else:
                    return 0
            else:
                return 0
        elif len(tokens[i]) == 4:
            #check_year
            if (int(tokens[i]) == 20 or (int(tokens[i]) == 2020) or (int(tokens[i]) == 202) or (int(tokens[i]) > 2020)):
                #check month
                if int(tokens[i+1]) >= 3:
                    return 1
                else:
                    return 0
            else:
                return 0
    return 0

def parse_symptoms(str):
    sum = 0
    str = str.lower()
    if len(str) == 0 or str.find("nu are") or str.find("fara acuze") or str.find("asimptomatic"):
        return sum
    if str.find('febr') != -1 and str.find('afebr') == -1 and str.find('subfebr') == -1:
        sum += 1
    if str.find('tuse') and (str.find('seac') or str.find('iritativ')):
        sum += 1
    if str.find('mialgi'):
        sum += 1
    if str.find('tuse') and (str.find('seac') or str.find('iritativ')):
        sum += 1



    return sum

#functie de parsare si codificare a fiacrui rand
def my_function(row):
    new_row = []
    #data debut simptome declarate
    new_row.append(parse_date(row[0]))
    #TODO simptome declarate
    new_row.append(parse_symptoms(row[1]))
    #data internare
    new_row.append(parse_date(row[2]))
    #TODO simptome raportate la internare
    new_row.append(row[3])
    #TODO diagnostic si semne de internare
    new_row.append(row[4])
    #TODO istoric de calatorie
    new_row.append(row[5])
    #TODO mijloace de transport folosite
    new_row.append(row[6])
    #TODO confirmare contact cu o persoana infectata
    new_row.append(row[7])
    return new_row

# se citeste setul de date initial si se iau doar coloanele de interes
dataframe = pd.read_csv("mps.dataset.csv", sep=';')
keep_col = ["dată debut simptome declarate", "simptome declarate", "dată internare",
            "simptome raportate la internare", "diagnostic și semne de internare", "istoric de călătorie", "mijloace de transport folosite",
            "confirmare contact cu o persoană infectată"]
new_f = dataframe[keep_col]

#se creeaza noul set de date
new_f.to_csv("newDataSet.csv", index=False)

new_rows = [] # lista a noilor randuri din setul de date

# se citeste din noul set de date(rand cu rand) si se modifica fiecare rand apeland functia my_function()
# randurile modificate se adauga in new_rows
# exceptie face antetul documentului
with open('newDataSet.csv', 'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        if row[0] != "dată debut simptome declarate":
            new_row = my_function(row)  # at first, just copy the row
            new_rows.append(new_row)  # add the modified rows
        else:
            new_rows.append(row)

# se scriu noile randuri in document
with open('newDataSet.csv', 'w') as f:
    # Overwrite the old file with the modified rows
    writer = csv.writer(f)
    writer.writerows(new_rows)
